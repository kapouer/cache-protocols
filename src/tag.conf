upstream memcached-service {
	server 127.0.0.1:$memcached;
}

upstream express-service {
	server 127.0.0.1:$express;
}

# shared across all sites
lua_shared_dict tags 1m;
lua_shared_dict variants 1m;

init_by_lua_block {
	package.path = "$root/src/?.lua;" .. package.path
	cacheTag = require "tag"
	cacheTag.tags = ngx.shared.tags
	cacheTag.variants = ngx.shared.variants
}

server {
	listen $nginx;
	location = /_memc {
		internal;

		memc_connect_timeout 100ms;
		memc_send_timeout 100ms;
		memc_read_timeout 100ms;
		memc_ignore_client_abort on;

		set $memc_exptime 300;
		set $memc_key $query_string;

		memc_pass memcached-service;
	}

	location / {
		# default request key
		set $keyReq $host$request_uri;
		# default response key
		set $keyRes $keyReq;
		
		# declare hashes
		set $hashReq '';
		set $hashRes '';
		
		# request: build key out of variants, populate X-Cache-Tag request header
		rewrite_by_lua_block {
			local keyReq = ngx.var.keyReq
			local nkeyReq = cacheTag.get(keyReq)
			ngx.var.keyReq = keyReq
			ngx.log(ngx.ERR, string.format("Request key '%s'", keyReq))
			ngx.var.hashReq = ngx.md5(keyReq)
		}
		# response: store variants rebuild key
		header_filter_by_lua_block {
			local keyRes = cacheTag.set(ngx.var.keyRes, ngx.resp.get_headers())
			if (keyRes ~= ngx.var.keyReq) then
				ngx.var.hashRes = ngx.md5(keyRes)
			else
				ngx.var.hashRes = ngx.var.hashReq
			end
		}
		
		# keep them around for tests, clear them in production
		# more_clear_headers 'X-Cache-Tag';

		srcache_methods GET HEAD;
		srcache_fetch GET /_memc $hashReq;
		srcache_store PUT /_memc $hashRes;
		srcache_store_statuses 200 301 302;

		include /etc/nginx/proxy_params;
		proxy_pass http://express-service;
	}

}

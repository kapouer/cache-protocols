# default request key
set $keyReq $host$request_uri;
# default response key
set $keyRes $keyReq;

# declare hashes
set $hashReq '';
set $hashRes '';

rewrite_by_lua_block {
  local keyReq = ngx.var.keyReq
  local nkeyReq = keyReq
  local method = ngx.req.get_method()
  if method == "GET" or method == "HEAD" then
    nkeyReq = cacheScope.get(nkeyReq, ngx.var)
  end
  nkeyReq = cacheTag.get(nkeyReq)
  ngx.var.hashReq = ngx.md5(nkeyReq)
  if nkeyReq ~= keyReq then
    ngx.var.keyReq = nkeyReq
  end
  ngx.log(ngx.INFO, "request key '", nkeyReq, "'")
}

header_filter_by_lua_block {
  local method = ngx.req.get_method()
  local keyRes = ngx.var.keyRes
  local nkeyRes = keyRes
  if method == "GET" or method == "HEAD" then
    nkeyRes = cacheScope.set(nkeyRes, ngx.var, ngx.header)
  end
  nkeyRes = cacheTag.set(nkeyRes, ngx.header)
  if nkeyRes ~= keyRes then
    ngx.var.hashRes = ngx.md5(nkeyRes)
  else
    ngx.var.hashRes = ngx.var.hashReq
  end
  ngx.log(ngx.INFO, "response key '", nkeyRes, "'")
}

srcache_methods GET HEAD;
# srcache_response_cache_control off; # srcache honours Cache-Control headers by default
srcache_default_expire 1d; # set to zero (no expiration) when tag invalidation is perfectly setup
srcache_fetch GET /_memc $hashReq;
srcache_store PUT /_memc $hashRes;
srcache_store_statuses 200 301 302;

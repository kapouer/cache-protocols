# default request key
set $keyReq $host$request_uri;
# default response key
set $keyRes $keyReq;

# declare hashes
set $hashReq '';
set $hashRes '';

rewrite_by_lua_block {
	local keyReq = ngx.var.keyReq
	local nkeyReq = cacheTag.get(keyReq)
	local method = ngx.req.get_method()
	if method == "GET" or method == "HEAD" then
		nkeyReq = cacheScope.get(nkeyReq, ngx.var)
	end
	ngx.var.hashReq = ngx.md5(nkeyReq)
	if nkeyReq ~= keyReq then
		ngx.var.keyReq = nkeyReq
	end
}

header_filter_by_lua_block {
	local method = ngx.req.get_method()
	local keyRes = ngx.var.keyRes
	local nkeyRes = cacheTag.set(keyRes, ngx.resp.get_headers())
	if method == "GET" or method == "HEAD" then
		nkeyRes = cacheScope.set(nkeyRes, ngx.var, ngx.resp.get_headers())
	end
	if nkeyRes ~= keyRes then
		ngx.var.hashRes = ngx.md5(nkeyRes)
	else
		ngx.var.hashRes = ngx.var.hashReq
	end
}

# keep them around for tests, clear them in production
# TODO the module knows about these headers, so clear them in it
# more_clear_headers 'X-Cache-Restriction';
# more_clear_headers 'X-Cache-Key-Handshake';

srcache_methods GET HEAD;
srcache_fetch GET /_memc $hashReq;
srcache_store PUT /_memc $hashRes;
srcache_store_statuses 200 301 302;

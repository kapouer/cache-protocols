upstream memcached-service {
	server 127.0.0.1:$memcached;
}

upstream express-service {
	server 127.0.0.1:$express;
}

# shared across all sites
lua_shared_dict tags 1m;
lua_shared_dict variants 1m;
lua_shared_dict blobs 10m;

init_by_lua_block {
	cacheTag = require "tag"
	cacheTag.tags = ngx.shared.tags
	cacheTag.variants = ngx.shared.variants
}

server {
	listen $nginx;
	location = /_memc {
		internal;

		memc_connect_timeout 100ms;
		memc_send_timeout 100ms;
		memc_read_timeout 100ms;
		memc_ignore_client_abort on;

		set $memc_exptime 300;
		set $memc_key $query_string;

		memc_pass memcached-service;
	}

	location / {
		# request key
		# TODO use $host$request_uri
		set $keyReq $request_uri;
		# response key
		set $keyRes $keyReq;
		
		# request: build key out of variants
		rewrite_by_lua_block {
			ngx.var.keyReq = cacheTag.get(ngx.var.keyReq)
			ngx.log(ngx.INFO, string.format("request key %s", ngx.var.keyReq))
		}
		# response: store variants rebuild key
		header_filter_by_lua_block {
			local keyRes = cacheTag.set(ngx.var.keyRes, ngx.resp.get_headers())
			if (ngx.var.keyReq ~= keyRes) then
				ngx.var.hashRes = ngx.md5(keyRes)
			end
			ngx.log(ngx.INFO, string.format("response key %s", keyRes))
		}
		set_md5 $hashReq $keyReq;
		set $hashRes $hashReq;
		
		# proxy_set_header X-Cache-Version $version;
		# keep them around for tests, clear them in production
		# more_clear_headers 'X-Cache-Version';

		srcache_methods GET HEAD;
		srcache_fetch GET /_memc $hashReq;
		srcache_store PUT /_memc $hashRes;
		srcache_store_statuses 200 301 302;

		include /etc/nginx/proxy_params;
		proxy_pass http://express-service;
	}

}

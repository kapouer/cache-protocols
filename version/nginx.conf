upstream memcached-service {
	server 127.0.0.1:$memcached;
}

upstream nodejs-service {
	server 127.0.0.1:$express;
}

# shared across all sites
lua_shared_dict cache 1m;
lua_shared_dict variants 1m;
lua_shared_dict blobs 10m;

server {
	listen $nginx;
	location = /_memc {
		internal;

		memc_connect_timeout 100ms;
		memc_send_timeout 100ms;
		memc_read_timeout 100ms;
		memc_ignore_client_abort on;

		set $memc_exptime 300;
		set $memc_key $query_string;

		memc_pass memcached-service;
	}

	location / {
		set_by_lua_block $version {
			-- cache:get(ngx.request_uri) -> domain
			-- cache:get(domain) -> version
			-- and setting a domain version automatically invalids all url :Ã 
			local cache = ngx.shared.cache;
			local version = cache:get("version");
			if (version == nil) then
				version = 0;
			end
			return version;
		}

		proxy_set_header X-Cache-Version $version;
		# keep them around for tests, clear them in production
		# more_clear_headers 'X-Cache-Version';

		header_filter_by_lua_block {
			local headers = ngx.resp.get_headers();
			--local vary = headers.vary;
			local version = headers["X-Cache-Version"];
			local cache = ngx.shared.cache;
			if (version ~= nil) then
				cache:set("version", version);
			end
		}
		
		set_md5 $key "$version $request_uri";

		srcache_methods GET HEAD;
		srcache_fetch GET /_memc $key;
		srcache_store PUT /_memc $key;
		srcache_store_statuses 200 301 302;

		include /etc/nginx/proxy_params;
		proxy_pass http://nodejs-service;
	}

}

# nginx phases
# rewrite (server level)
# config (location lookup)
# rewrite (location level)
# post rewrite
# pre access
# access
# post access
# try files
# content
# log

upstream memcached-service {
	server 127.0.0.1:11211;
	keepalive 10;
}
upstream nodejs-service {
	server 127.0.0.1:3000;
	keepalive 10;
}

lua_shared_dict cache 1m;

init_by_lua_block {
	local cache = ngx.shared.cache;
	cache:set("version", 0);
	cache:set("skips", 0);
}

server {
	listen 2300;
	server_name localhost;
	location = /_memc {
		internal;

		memc_connect_timeout 100ms;
		memc_send_timeout 100ms;
		memc_read_timeout 100ms;
		memc_ignore_client_abort on;

		set $memc_exptime 300;
		set $memc_key $query_string;

		memc_pass memcached-service;
	}

	location /cache {
		add_header Content-Type "text/plain";
		content_by_lua_block {
			local cache = ngx.shared.cache;
			ngx.say("cache version: ", cache:get("version"));
			ngx.say("cache skips: ", cache:get("skips"));
		}
	}

	location / {
		set_by_lua_block $version {
			local cache = ngx.shared.cache;
			local version = cache:get("version");
			return version;
		}

		proxy_set_header X-Cache-Version $version;

		header_filter_by_lua_block {
			local headers = ngx.resp.get_headers();
			local version = headers["X-Cache-Version"];
			local cache = ngx.shared.cache;
			if (version ~= nil) then
				cache:set("version", version);
			end
			-- headers["X-Cache-Version"] = nil;
		}
		
		set_by_lua_block $skip {
			local cache = ngx.shared.cache;
			local skip = 0;
			if (ngx.var.cookie_bearer ~= nil) then
				cache:incr("skips", 1);
				skip = 1;
			end
			return skip;
		}

		set $key "$version-$request_uri-$http_user_agent";

		srcache_fetch_skip $skip;
		srcache_store_skip $skip;
		srcache_methods GET HEAD;
		srcache_fetch GET /_memc $key;
		srcache_store PUT /_memc $key;
		srcache_store_statuses 200 301 302;

		include /etc/nginx/proxy_params;
		proxy_pass http://nodejs-service;
	}

}
